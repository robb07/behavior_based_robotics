//#pragma config(Sensor, dgtl1,  ultrasonic,     sensorSONAR_cm)
//#pragma config(Sensor, dgtl6,  rightLimit,     sensorTouch)
//#pragma config(Sensor, dgtl7,  leftLimit,      sensorTouch)
//#pragma config(Sensor, dgtl8,  headEncoder,    sensorQuadEncoder)
//#pragma config(Motor,  port4,           headMotor,     tmotorVex269, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//implements the feelForce behavior
// behavior functions:
//		feelForce
// behavior dependencies:
//		lookBackAndForth
//    trackHeadAngle
//    logObstacles

//============ constants =========================
//from feelForce
const float MAX_FORCE_DISTANCE = 2.0;//m
const float FORCE_COEFFICIENT = 0.01;

//+++++++++++++++| feelForce behavior |+++++++++++++++++++++++++++++++++++++

float* feelForce(float* obs_log, float* pose){
	float u_x_o, u_y_o, u_mag, phi_o;
	float f_mag, f_x=0.0, f_y=0.0;
	//f_x = 0.0;
	//f_y = 0.0;
	for(int i=0; i< N_ANGLES; i++){
		u_x_o = pose[0] - obs_log[2*i+0];
		u_y_o = pose[1] - obs_log[2*i+1];
		u_mag = sqrt(u_x_o*u_x_o + u_y_o*u_y_o);
		phi_o = atan2(u_y_o,u_x_o);
		if(u_mag < MAX_FORCE_DISTANCE){
			f_mag = 1.0/(u_mag*u_mag)*FORCE_COEFFICIENT;
			f_x += f_mag*cos(phi_o);
			f_y += f_mag*sin(phi_o);
		}
	}
	float f_v[2];
	f_v[0] = f_x;
	f_v[1] = f_y;
	return	f_v;
}
